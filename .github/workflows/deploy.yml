name: Task CI/CD Workflow

on:
  push:
    branches:
      - main

jobs:
  build-test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: task
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping -h localhost -u root -proot" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Debug MySQL connection
        run: |
          echo "Testing MySQL connection..."
          for i in {1..30}; do
            if mysql -h 127.0.0.1 -P 3306 -u root -proot -e "SELECT 1;" > /dev/null 2>&1; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done
          if [ $i -eq 30 ]; then
            echo "MySQL did not start within the expected time."
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'

      - name: Cache Node Modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: node-modules-${{ runner.os }}-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Set environment variables
        env:
          DATABASE_URL: mysql://root:root@127.0.0.1:3306/task
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRATION: ${{ secrets.JWT_EXPIRATION }}
          NODE_ENV: test
        run: |
          echo "DATABASE_URL=${DATABASE_URL}" >> $GITHUB_ENV
          echo "JWT_SECRET=${JWT_SECRET}" >> $GITHUB_ENV
          echo "JWT_EXPIRATION=${JWT_EXPIRATION}" >> $GITHUB_ENV
          echo "NODE_ENV=${NODE_ENV}" >> $GITHUB_ENV

      - name: Generate Prisma Client
        run: yarn prisma generate

      - name: Run migrations
        run: yarn prisma migrate deploy

      - name: Run tests
        run: yarn test

  build-push:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        env:
          DATABASE_URL: mysql://root:root@127.0.0.1:3306/task
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
        run: |
          docker buildx build \
            --build-arg DATABASE_URL="$DATABASE_URL" \
            --build-arg JWT_SECRET="$JWT_SECRET" \
            -t abdulhaleemsan/task-app:latest .

      - name: Push Docker Image
        run: docker push abdulhaleemsan/task-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-push
    steps:
      - name: SSH into EC2 and Deploy
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          timeout: 300s # 5 minutes timeout
          script: |
            set -e  # Exit on any error
            echo "Starting deployment..."

            # Navigate to project directory
            cd /home/ec2-user/task || {
              echo "Directory not found, cloning repository..."
              git clone https://github.com/Abdulhaleem-6/task.git
              cd task
            }

            # Pull the latest Docker image
            echo "Pulling latest Docker image..."
            docker pull abdulhaleemsan/task-app:latest || {
              echo "Failed to pull Docker image"
              exit 1
            }

            # Export kubeconfig for k3s
            echo "Setting up kubectl..."
            export KUBECONFIG=/etc/rancher/k3s/k3s.yaml

            #Navigate to the k8s folder and apply Kubernetes manifests
            echo "Applying Kubernetes manifests..."
            kubectl apply -f k8s || {
              echo "Failed to apply Kubernetes manifests"
              exit 1
            }

            # Verify deployment
            kubectl rollout status deployment/task-app || {
              echo "Deployment failed"
              exit 1
            }

            echo "Deployment completed successfully"
